S -> X | L
X -> B | I | F | P | LI | V | M | FUN | ( X , X ) | X X | ( X )
FUN -> fun V `->` X
P -> I O I
F -> IF | BF | VF
VF -> if X then X else X
IF -> if B then I else I
BF -> if B then B else B
End -> `|` X `->` X | End End

M -> match V with End
L -> let V = X
L -> let rec V = X
LI -> L in X
V -> Vexp | ( Vexp ) | List | Vexp ( Vexp )
Vexp -> Vname | FunName | Vexp | Vexp VO Vexp | ( Vname , Vname ) | Vexp Vexp
List -> [] | V :: V
Vname -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | q | r | s | t | u | v | w | x | y | z
FunName -> foldright | map | filter | curry | uncurry
VO -> IO | BO | IOb
IO -> + | - | * | /
I -> Iexp | ( Iexp )
Iexp -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | IF | I IO I
IOb -> > | = | <
B -> Bexp | ( Bexp )
Bexp -> true | false | B BO B | BF | I IOb I
BO -> and | or
