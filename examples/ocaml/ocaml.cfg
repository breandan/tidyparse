S -> X | L
X -> B | I | F | P | LI | V | M | FUN
FUN -> fun V `->` X
P -> I O I
F -> IF | BF
IF -> if B then I else I
BF -> if B then B else B
End -> `|` X `->` X | End End
Result -> X
M -> match V with End
L -> let V = Result
L -> let rec V = Result
LI -> L in X
V -> Vexp | ( Vexp ) | List
Vexp -> Vname | FunName | Vexp Vexp | Vexp | Vexp VO Vexp
List -> [] | h::t | V :: V
Vname -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | q | r | s | t | u | v | w | x | y | z
FunName -> counter | map
VO -> IO | BO | IOb
IO -> + | - | * | /
I -> Iexp | ( Iexp )
Iexp -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | IF | I IO I
IOb -> > | = | <
B -> Bexp | ( Bexp )
Bexp -> true | false | B BO B | BF | I IOb I
BO -> and | or
