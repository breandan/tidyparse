S -> X
X -> A | V | ( X , X ) | X X | ( X )

A -> FUN | F | LI | M | L
FUN -> fun V `->` X
F -> if X then X else X
M -> match V with Branch
Branch -> `|` X `->` X | Branch Branch

L -> let V = X
L -> let rec V = X
LI -> L in X

V -> Vexp | ( Vexp ) | Vexp ( Vexp ) | List
Vexp -> Vname | FunName | Vexp | Vexp VO Vexp | ( Vname , Vname ) | Vexp Vexp | B | I
List -> [] | V :: V
Vname -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | q | r | s | t | u | v | w | x | y | z
FunName -> foldright | map | filter | curry | uncurry | ( VO )
VO -> IO | BO | IOb
IO -> + | - | * | /
I -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
IOb -> > | = | <
B ->  true | false
BO -> `||` | `&&`
